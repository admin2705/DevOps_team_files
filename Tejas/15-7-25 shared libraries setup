all necessary commands


Jenkins - 
ssh -i /Users/tejasbhandirge/Downloads/qst-jenkins-key.pem ubuntu@18.221.193.154

Agent -
ssh -i /Users/tejasbhandirge/Downloads/qst-jenkins-key.pem ubuntu@18.223.131.97





-------------------------------------------------------------------------------------------------------------------------------------
Installing jenkins and java on jenkins and agent instance 

Java install -

sudo apt update
sudo apt install fontconfig openjdk-21-jre

Jenkins install -

sudo wget -O /etc/apt/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/etc/apt/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins

sudo systemctl enable jenkins

Run below command on agent

Sudo usermod -aG ubuntu jenkins

-------------------------------------------------------------------------------------------------------------------------------------
Shared libraries 


Create a folder name vars

In vars folder write all groovy scripts 

Jenkins-shared-libraries/vars/hello.groovy

def call(){
  echo"hello-this is hrms application"
}


Jenkins-shared-libraries/vars/clone.groovy

ef call(String url, String branch){
  git url: url, branch: branch
echo"clone successful"
}


Jenkins-shared-libraries/vars/docker.groovy

def call(String imagename, String tag, String username){
  sh"docker build -t ${username}/${imagename}:${tag} ."
}


All this will be called by jenkins piepeline
-------------------------------------------------------------------------------------------------------------------------------------

Pipeline with shared libraries


@Library("shared") _
pipeline {
    agent { label "agent" }

    environment {
        FRONTEND_IMAGE = 'tejas2506/frontend-hrms:t1'
        BACKEND_IMAGE  = 'tejas2506/backend-hrms:t1'
        DOCKERHUB_CREDENTIALS = 'docker'
        DOCKERHUB_USER        = 'tejas2506'
    }

    stages {
        stage('hello') {
            steps {
                script{
                hello()
                }
            }
        }
        stage('Clone') {
            steps {
                script{
                clone("https://github.com/tejas-b25/QST_HRMS.git", "main")
                }
            }
        }
        stage('Cloneinstall') {
            steps {
                dir('installations') {
                script{
                clone("https://github.com/tejas-b25/installations-for-jenkins.git", "main")
                    sh '''
                        chmod +x installation.sh
                        ./installation.sh
                    '''
                    }
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir('Backend') {
                    sh '''
                        sudo apt update
                        sudo apt install -y openjdk-17-jdk maven
                        java -version
                        mvn clean install -Dmaven.test.skip=true
                         '''
                script{
                    docker("backend-hrms", "t3", "tejas2506")
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('Frontend') {
                    sh '''
                        sudo apt remove -y nodejs npm
                        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
                        sudo apt install -y nodejs
                        sudo npm install -g @angular/cli@17
                        rm -rf node_modules package-lock.json
                        npm install
                        ng build --configuration production
                    '''
                    script{
                    docker("frontend-hrms", "t3", "tejas2506")
                    }
                }
            }
        }
    }
}




------------------------------------------------------------------------------------------------------------------------------------

Normal pipeline 

pipeline {
    agent {label "agent"}

    environment {
        FRONTEND_IMAGE = 'tejas2506/frontend:t1'
        BACKEND_IMAGE  = 'tejas2506/backend:t1'
        DOCKERHUB_CREDENTIALS = 'docker'
        DOCKERHUB_USER        = 'tejas2506'
    }
    
    stages {
        stage('git clone') {
            steps {
                git branch: 'main', url: 'https://github.com/tejas-b25/quantumsoft-docker-compose.git'
            }
        }
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | sudo docker login -u "$DOCKER_USER" --password-stdin
                    '''
                }
            }
        }
        stage('Build & Push Backend Image') {
            steps {
                    sh '''
                    docker build -t $BACKEND_IMAGE .
                    docker push $BACKEND_IMAGE
                    '''
            }
        }
        stage('Build & Push Frontend Image') {
            steps {
                dir('qfrontend') {
                    sh '''
                    docker build -t $FRONTEND_IMAGE .
                    docker push $FRONTEND_IMAGE
                    '''
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                dir('k8s') {
                    withCredentials([file(credentialsId: 'jenkins-id', variable: 'KUBECONFIG')]) {
                        sh 'kubectl delete all --all'
                        sh 'kubectl apply -f frontend-deployment.yaml'
                        sh 'kubectl apply -f backend-deployment.yaml'
                        sh 'kubectl apply -f mysql-deployment.yaml'
                        sh '''
                        i=1
                        while [ $i -le 6 ]
                        do
                            echo "Attempt $i: Waiting 10 seconds..."
                            sleep 10
                            kubectl get all
                            i=$((i+1))
                        done
                        '''
                    }
                }
            }
        }
    }
}


------------------------------------------------------------------------------------------------------------------------------------











