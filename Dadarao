pipeline {
    agent { label 'agent' }
 
    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub'
        DOCKERHUB_USERNAME = 'dadarao4141'
        FRONTEND_IMAGE = 'dadarao4141/hrms-frontend:v1'
        BACKEND_IMAGE = 'dadarao4141/hrms-backend:v1'
    }
 
    stages {
        stage('Install Dependencies') {
            steps {
                echo 'Installing Docker, Node.js 18, Angular CLI 17, Java 17, and Maven...'
                sh '''
                    sudo apt update
 
                    # Install Docker & Docker Compose
                    sudo apt install -y docker.io docker-compose
                    sudo systemctl enable docker
                    sudo systemctl start docker
                    sudo usermod -aG docker ubuntu
 
                    # Install Node.js 18 and Angular CLI 17
                    sudo apt remove -y nodejs npm || true
                    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
                    sudo apt install -y nodejs
                    sudo npm install -g @angular/cli@17
 
                    # Install Java 17 and Maven
                    sudo apt install -y openjdk-17-jdk maven
                '''
            }
        }
 
        stage('Clone Code') {
            steps {
                git branch: 'main', url: 'https://github.com/DadaraoRaut/QST_HRMS.git'
            }
        }
 
        stage('Build Frontend') {
            steps {
                echo 'Building Angular frontend...'
                dir('Frontend') {
                    sh '''
                        rm -rf node_modules package-lock.json dist/
                        npm install
                        ng build --configuration production
                    '''
                }
            }
        }
 
        stage('Build Backend') {
            steps {
                echo 'Building Spring Boot backend...'
                dir('Backend') {
                    sh '''
                        mvn clean install -DskipTests -Dmaven.test.skip=true
                    '''
                }
            }
        }
 
        stage('Build Docker Images') {
            steps {
                echo 'Building Docker images...'
                sh 'docker build -t $FRONTEND_IMAGE ./Frontend'
                sh 'docker build -t $BACKEND_IMAGE ./Backend'
            }
        }
 
        stage('Push Docker Images') {
            steps {
                echo 'Pushing Docker images to Docker Hub...'
                withCredentials([usernamePassword(
                    credentialsId: "${DOCKERHUB_CREDENTIALS}",
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push $FRONTEND_IMAGE
                        docker push $BACKEND_IMAGE
                    '''
                }
            }
        }
 
        stage('Deploy using Docker Compose') {
            steps {
                echo 'Deploying containers using Docker Compose...'
                withCredentials([usernamePassword(
                    credentialsId: "${DOCKERHUB_CREDENTIALS}",
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker-compose up -d
                    '''
                }
            }
        }
    }
 
    post {
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed! Check logs above.'
        }
    }
}
